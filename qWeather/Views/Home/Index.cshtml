@model List<qWeather.Models.Weather>

@{
    ViewBag.Title = "Home Page";
}

    <div class="row">
        <div class="col">
            <div class="card row">
                <div class="card-body">
                    <h3 class="card-title">CURRENT</h3>
                    <div>
                        <div class="d-inline">INSIDE: </div> <div class="d-inline" data-bind="text: inside"></div>
                    </div>
                    <div>
                        <div class="d-inline">OUTSIDE: </div><div class="d-inline" data-bind="text: outside"></div>
                    </div>
                    <div>
                        <div class="d-inline">HUMIDITY: </div><div class="d-inline" data-bind="text: humidity"></div>
                    </div>
                </div>
            </div>
            <div class="card row">
                <div class="card-body">
                    <h3 class="card-title">AVERAGE</h3>
                    <div>
                        <div class="d-inline">INSIDE: </div> <div class="d-inline" data-bind="text: insideAverage"></div>
                    </div>
                    <div>
                        <div class="d-inline">OUTSIDE: </div><div class="d-inline" data-bind="text: outsideAverage"></div>
                    </div>
                    <div>
                        <div class="d-inline">HUMIDITY: </div><div class="d-inline" data-bind="text: humidityAverage"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">GRAPH</h3>
                    <div style="border:1px" data-bind="googleChartTemp: { chartType: 'Line', legend: true }"></div>
                    <div data-bind="googleChartHumidity: { chartType: 'Line', legend: true }"></div>
                </div>
            </div>
        </div>
    </div>





@section Scripts {
    <script>

        var model = {
            weather: ko.observableArray(),
            outside: ko.observable(),
            inside: ko.observable(),
            humidity: ko.observable(),
            outsideAverage: ko.observable(),
            insideAverage: ko.observable(),
            humidityAverage: ko.observable()
        };
        
        function getTodayString(date) {
            return "?start=" + getcurrentDate(date) + "T00:00:00&end=" + getcurrentDate(date) + "T23:59:59";
        }

        function getcurrentDate(date) {
            return date.getFullYear().toString() + "-" + (date.getMonth() + 1).toString() + "-" + date.getDate().toString();
        }

        function getToday() {
            sendAjaxRequest("GET", function (data) {
                model.weather.removeAll();
                for (var i = 0; i < data.length; i++) {
                    model.weather.push(data[i]);
                }
            }, getTodayString(new Date()));
        }

        function getLast() {
            sendAjaxRequest("GET", function (data) {
                model.outside(data.VAL1);
                model.inside(data.VAL2);
                model.humidity(data.HUMIDITY);
            }, "last");
        }

        function getAverage() {
            sendAjaxRequest("GET", function (data) {
                model.outsideAverage((data.insideTemp).toFixed(1));
                model.insideAverage((data.outsideTemp).toFixed(1));
                model.humidityAverage((data.humidity).toFixed(1));
            }, "average" + getTodayString(new Date()));
        }


        function sendAjaxRequest(httpMethod, callback, url, reqData) {
            $.ajax("/api" + (url ? "/" + url : ""), {
                type: httpMethod,
                success: callback,
                data: JSON.stringify(reqData),
                accepts: "application/json",
                contentType: "application/json"

            });
        }

        google.charts.load('current', {
            'packages': ['line'],
            ignoreWindowOnLoad: true });

        ko.bindingHandlers.googleChartHumidity = {

            update: function (element, valueAccessor, allBindingsAccesor, viewModel, bindingContext) {

                if (viewModel.weather().length == 0) return;

                var chart = new google.charts.Line(element);
                var data = new google.visualization.DataTable();

                data.addColumn('date', 'Date Time');
                data.addColumn('number', 'Humidity');

                var dataArray = [];

                for (var i = 0; i < viewModel.weather().length; i++) {
                    var thisdate = new Date(viewModel.weather()[i].DateTimeFormatted);
                    dataArray.push([thisdate, viewModel.weather()[i].HUMIDITY]);
                }

                data.addRows(dataArray);

                var options = {
                    chart: {
                        title: 'Humidity',
                        subtitle: getcurrentDate(new Date()).toString()
                    },
                    width: 900,
                    height: 300,
                    series: {
                        0: { axis: 'Humidity' }
                    },
                    axes: {
                        y: {
                            Humidity: { label: 'Humidity %' }
                        }
                    }
                };

                chart.draw(data, options);
            }
        }

        ko.bindingHandlers.googleChartTemp = {
            update: function (element, valueAccessor, allBindingsAccesor, viewModel, bindingContext) {

                if (viewModel.weather().length == 0) return;

                var chart = new google.charts.Line(element);
                var data = new google.visualization.DataTable();

                data.addColumn('date', 'Date Time');
                data.addColumn('number', 'Outside_C');
                data.addColumn('number', 'Inside_C')

                var dataArray = [];

                for (var i = 0; i < viewModel.weather().length; i++) {
                    var thisdate = new Date(viewModel.weather()[i].DateTimeFormatted);
                    dataArray.push([thisdate, viewModel.weather()[i].VAL1, viewModel.weather()[i].VAL2]);
                }

                data.addRows(dataArray);

                var options = {
                    chart: {
                        title: 'Temperatures',
                        subtitle: getcurrentDate(new Date()).toString()
                    },
                    width: 900,
                    height: 300,
                    series: {
                        0: { axis: 'Outside C' },
                        1: {axis: 'Inside C'}
                    },
                    axes: {
                        y: {
                            Outside_C: { label: 'Outside C' },
                            Inside_C: {label: 'Inside C'}
                        }
                    }
                };

                chart.draw(data, options);
            }
        }

        $(window).on('load', function () {
            getToday();
            getLast();
            getAverage();
            ko.applyBindings(model);
        });
           
    </script>
}