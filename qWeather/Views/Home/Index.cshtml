@model List<qWeather.Models.Weather>
@using System.Web.Configuration;
@{
    ViewBag.Title = "Home Page";
}
<br />
    <div class="row">
        <div class="col">
            <div class="card row" >
                <div class="card-body" >
                    <h3 class="card-title">CURRENT</h3>
                    <div>
                        <div class="d-inline">INSIDE: </div> <div class="d-inline" data-bind="text: inside"></div>
                    </div>
                    <div>
                        <div class="d-inline">OUTSIDE: </div><div class="d-inline" data-bind="text: outside"></div>
                    </div>
                    <div>
                        <div class="d-inline">HUMIDITY: </div><div class="d-inline" data-bind="text: humidity"></div>
                    </div>
                </div>
            </div>
            <br />
            <div class="card row">
                <div class="card-body">
                    <h3 class="card-title">AVERAGE</h3>
                    <div>
                        <div class="d-inline">INSIDE: </div> <div class="d-inline" data-bind="text: insideAverage"></div>
                    </div>
                    <div>
                        <div class="d-inline">OUTSIDE: </div><div class="d-inline" data-bind="text: outsideAverage"></div>
                    </div>
                    <div>
                        <div class="d-inline">HUMIDITY: </div><div class="d-inline" data-bind="text: humidityAverage"></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title">GRAPH</h3>
                    <canvas width="800" height="255" data-bind="ChartTemp"></canvas>
                    <br />
                    <canvas width="800" height="255" data-bind="ChartHumidity"></canvas>
                </div>
            </div>
        </div>
    </div>

@section Scripts {
    <script>

        var model = {
            weather: ko.observableArray(),
            outside: ko.observable(),
            inside: ko.observable(),
            humidity: ko.observable(),
            outsideAverage: ko.observable(),
            insideAverage: ko.observable(),
            humidityAverage: ko.observable()
        };
        
        function getTodayString(date) {
            return "?start=" + getcurrentDate(date) + "T00:00:00&end=" + getcurrentDate(date) + "T23:59:59";
        }

        function getcurrentDate(date) {
            return date.getFullYear().toString() + "-" + (date.getMonth() + 1).toString() + "-" + date.getDate().toString();
        }

        function getToday() {
            sendAjaxRequest("GET", function (data) {
                model.weather.removeAll();
                for (var i = 0; i < data.length; i++) {
                    model.weather.push(data[i]);
                }
            }, getTodayString(new Date()));
        }

        function getLast() {
            sendAjaxRequest("GET", function (data) {
                model.outside((data.VAL1).toFixed(1));
                model.inside((data.VAL2).toFixed(1));
                model.humidity(data.HUMIDITY);
            }, "last");
        }

        function getAverage() {
            sendAjaxRequest("GET", function (data) {
                model.outsideAverage((data.insideTemp).toFixed(1));
                model.insideAverage((data.outsideTemp).toFixed(1));
                model.humidityAverage((data.humidity).toFixed(1));
            }, "average" + getTodayString(new Date()));
        }


        function sendAjaxRequest(httpMethod, callback, url, reqData) {

            var pathtoapi ="@WebConfigurationManager.AppSettings["pathtoapi"]";

            $.ajax(pathtoapi + (url ? "/" + url : ""), {
                type: httpMethod,
                success: callback,
                data: JSON.stringify(reqData),
                accepts: "application/json",
                contentType: "application/json"

            });
        }

        window.chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(201, 203, 207)'
        };

        ko.bindingHandlers.ChartTemp = {
            update: function (element, valueAccessor, allBindingsAccesor, viewModel, bindingContext) {

                if (this.charttemp) {
                    this.charttemp.destroy();
                    delete this.charttemp;
                }

                var dataArrayOut = [];
                var dataArrayIn = [];
                var dataLabels = []; 

                for (var i = 0; i < viewModel.weather().length; i++) {
                    var thisdate = new Date(viewModel.weather()[i].DateTimeFormatted);
                    dataArrayOut.push(viewModel.weather()[i].VAL1);
                    dataArrayIn.push(viewModel.weather()[i].VAL2);
                    dataLabels.push(thisdate.toLocaleTimeString().substring(0,5));
                }
           
                var ctx = element.getContext('2d');
                this.charttemp = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: dataLabels,
                        datasets: [
                            {
                                label: 'Outside',
                                borderColor: window.chartColors.blue,
                                backgroundColor: window.chartColors.blue,
                                fill: false,
                                data: dataArrayOut
                            },
                            {
                                label: 'Inside',
                                borderColor: window.chartColors.red,
                                backgroundColor: window.chartColors.red,
                                fill: false,
                                data: dataArrayIn
                            }
                        ],
                        fill:false
                    },

                    options: { }
                });
            }
        }

        ko.bindingHandlers.ChartHumidity = {
            update: function (element, valueAccessor, allBindingsAccesor, viewModel, bindingContext) {

                if (this.charthumidity) {
                    this.charthumidity.destroy();
                    delete this.charthumidity;
                }

                var dataLabels = [];
                var dataArrayHumidity = [];
                

                for (var i = 0; i < viewModel.weather().length; i++) {
                    var thisdate = new Date(viewModel.weather()[i].DateTimeFormatted);
                    dataArrayHumidity.push(viewModel.weather()[i].HUMIDITY);
                    dataLabels.push(thisdate.toLocaleTimeString().substring(0, 5));
                }

                var ctx = element.getContext('2d');
                this.charthumidity = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: dataLabels,
                        datasets: [
                            {
                                label: 'Humidity %',
                                borderColor: window.chartColors.purple,
                                backgroundColor: window.chartColors.purple,
                                fill: false,
                                data: dataArrayHumidity
                            }
                        ],
                        fill: false
                    },

                    options: {}
                });
            }
        }

        $(document).ready(function () {
            getToday();
            getLast();
            getAverage();
            ko.applyBindings(model);
        });   

    </script>
}